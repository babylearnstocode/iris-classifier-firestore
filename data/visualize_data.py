"""
File: visualize_iris.py
M√¥ t·∫£: Tr·ª±c quan h√≥a d·ªØ li·ªáu Iris dataset v·ªõi 3 bi·ªÉu ƒë·ªì c∆° b·∫£n
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

class IrisVisualizer:
    def __init__(self, csv_path="data/processed/iris_dataset.csv"):
        """Kh·ªüi t·∫°o IrisVisualizer"""
        self.csv_path = csv_path
        self.data = None
        self.feature_columns = ['sepal length (cm)', 'sepal width (cm)', 
                               'petal length (cm)', 'petal width (cm)']
        
        # Thi·∫øt l·∫≠p style
        plt.style.use('default')
        sns.set_palette("husl")
        
    def load_data(self):
        """T·∫£i d·ªØ li·ªáu t·ª´ file CSV"""
        try:
            if not Path(self.csv_path).exists():
                print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {self.csv_path}")
                return False
            
            self.data = pd.read_csv(self.csv_path)
            print(f"‚úÖ T·∫£i d·ªØ li·ªáu th√†nh c√¥ng: {len(self.data)} m·∫´u")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫£i d·ªØ li·ªáu: {e}")
            return False
    
    def plot_histogram(self):
        """1. Bi·ªÉu ƒë·ªì histogram cho c√°c features"""
        if self.data is None:
            print("‚ùå Ch∆∞a t·∫£i d·ªØ li·ªáu!")
            return
        
        fig, axes = plt.subplots(2, 2, figsize=(10, 8))
        fig.suptitle('Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi c√°c ƒë·∫∑c tr∆∞ng', fontsize=14, fontweight='bold')
        
        for i, feature in enumerate(self.feature_columns):
            row = i // 2
            col = i % 2
            
            axes[row, col].hist(self.data[feature], bins=15, alpha=0.7, 
                               color='skyblue', edgecolor='black')
            axes[row, col].set_title(feature, fontweight='bold')
            axes[row, col].set_xlabel('Gi√° tr·ªã (cm)')
            axes[row, col].set_ylabel('T·∫ßn su·∫•t')
            axes[row, col].grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.show()
    
    def plot_boxplot(self):
        """2. Boxplot theo t·ª´ng lo√†i hoa"""
        if self.data is None:
            print("‚ùå Ch∆∞a t·∫£i d·ªØ li·ªáu!")
            return
        
        fig, axes = plt.subplots(2, 2, figsize=(10, 8))
        fig.suptitle('Boxplot c√°c ƒë·∫∑c tr∆∞ng theo lo√†i hoa', fontsize=14, fontweight='bold')
        
        colors = ['lightcoral', 'lightblue', 'lightgreen']
        
        for i, feature in enumerate(self.feature_columns):
            row = i // 2
            col = i % 2
            
            sns.boxplot(data=self.data, x='target_name', y=feature, 
                       ax=axes[row, col], palette=colors)
            axes[row, col].set_title(feature, fontweight='bold')
            axes[row, col].set_xlabel('Lo√†i hoa')
            axes[row, col].set_ylabel('Gi√° tr·ªã (cm)')
            axes[row, col].grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.show()
    
    def plot_scatter(self):
        """3. Scatter plot gi·ªØa 2 ƒë·∫∑c tr∆∞ng quan tr·ªçng nh·∫•t"""
        if self.data is None:
            print("‚ùå Ch∆∞a t·∫£i d·ªØ li·ªáu!")
            return
        
        # T·∫°o 2 subplot: petal length vs petal width v√† sepal length vs sepal width
        fig, axes = plt.subplots(1, 2, figsize=(12, 5))
        fig.suptitle('Scatter Plot c√°c ƒë·∫∑c tr∆∞ng ch√≠nh', fontsize=14, fontweight='bold')
        
        colors = {'setosa': 'red', 'versicolor': 'blue', 'virginica': 'green'}
        
        # Plot 1: Petal length vs Petal width
        for species in self.data['target_name'].unique():
            data_subset = self.data[self.data['target_name'] == species]
            axes[0].scatter(data_subset['petal length (cm)'], 
                           data_subset['petal width (cm)'], 
                           c=colors[species], label=species, alpha=0.7, s=50)
        
        axes[0].set_xlabel('Petal Length (cm)')
        axes[0].set_ylabel('Petal Width (cm)')
        axes[0].set_title('Petal Length vs Petal Width')
        axes[0].legend()
        axes[0].grid(True, alpha=0.3)
        
        # Plot 2: Sepal length vs Sepal width
        for species in self.data['target_name'].unique():
            data_subset = self.data[self.data['target_name'] == species]
            axes[1].scatter(data_subset['sepal length (cm)'], 
                           data_subset['sepal width (cm)'], 
                           c=colors[species], label=species, alpha=0.7, s=50)
        
        axes[1].set_xlabel('Sepal Length (cm)')
        axes[1].set_ylabel('Sepal Width (cm)')
        axes[1].set_title('Sepal Length vs Sepal Width')
        axes[1].legend()
        axes[1].grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.show()
    
    def show_basic_info(self):
        """Hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n"""
        if self.data is None:
            print("‚ùå Ch∆∞a t·∫£i d·ªØ li·ªáu!")
            return
        
        print(f"\nüìä Th√¥ng tin c∆° b·∫£n:")
        print(f"‚Ä¢ T·ªïng s·ªë m·∫´u: {len(self.data)}")
        print(f"‚Ä¢ S·ªë ƒë·∫∑c tr∆∞ng: {len(self.feature_columns)}")
        print(f"‚Ä¢ C√°c lo√†i: {', '.join(self.data['target_name'].unique())}")
        
        print(f"\nüìà Ph√¢n b·ªë theo lo√†i:")
        for species, count in self.data['target_name'].value_counts().items():
            print(f"  - {species}: {count} m·∫´u")
    
    def visualize_all(self):
        """Hi·ªÉn th·ªã t·∫•t c·∫£ 3 bi·ªÉu ƒë·ªì c∆° b·∫£n"""
        print("üé® TR·ª∞C QUAN H√ìA D·ªÆ LI·ªÜU IRIS")
        print("=" * 40)
        
        if not self.load_data():
            return
        
        self.show_basic_info()
        
        print("\nüìä ƒêang t·∫°o c√°c bi·ªÉu ƒë·ªì...")
        
        print("1. Histogram...")
        self.plot_histogram()
        
        print("2. Boxplot...")
        self.plot_boxplot()
        
        print("3. Scatter Plot...")
        self.plot_scatter()
        
        print("\n‚úÖ Ho√†n th√†nh!")

def main():
    """H√†m ch√≠nh"""
    print("üå∏ IRIS DATASET VISUALIZER")
    print("=" * 40)
    
    # Kh·ªüi t·∫°o v√† ch·∫°y visualizer
    visualizer = IrisVisualizer()
    visualizer.visualize_all()
    
if __name__ == "__main__":
    main()