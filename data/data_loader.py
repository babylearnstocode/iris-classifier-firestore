import pandas as pd
import os
import streamlit as st
from sklearn.datasets import load_iris
from firebase_admin import firestore
import logging

class DataLoader:
    def __init__(self):
        self.local_dataset_path = 'data/iris_dataset.csv'
        self.firestore_collection = 'iris_dataset'
        
    def check_local_dataset_exists(self):
        """
        Ki·ªÉm tra xem file iris_dataset.csv c√≥ t·ªìn t·∫°i trong local kh√¥ng
        
        Returns:
            bool: True n·∫øu file t·ªìn t·∫°i, False n·∫øu kh√¥ng
        """
        try:
            return os.path.exists(self.local_dataset_path)
        except Exception as e:
            st.error(f"Error checking local dataset: {str(e)}")
            return False
    
    def load_local_dataset(self):
        """
        Load dataset t·ª´ file CSV local
        
        Returns:
            pandas.DataFrame or None: DataFrame n·∫øu load th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        try:
            if not self.check_local_dataset_exists():
                return None
                
            df = pd.read_csv(self.local_dataset_path)
            
            # Validate dataset structure
            required_columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']
            if all(col in df.columns for col in required_columns):
                st.info(f"üìÅ Dataset loaded from local file: {self.local_dataset_path}")
                return df
            else:
                st.warning(f"Local dataset found but missing required columns: {required_columns}")
                return None
                
        except Exception as e:
            st.error(f"Error loading local dataset: {str(e)}")
            return None
    
    def load_from_firestore(self, db):
        """
        Load dataset t·ª´ Firestore collection
        
        Args:
            db: Firestore database client
            
        Returns:
            pandas.DataFrame or None: DataFrame n·∫øu load th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        try:
            if not db:
                st.warning("Firestore client not available")
                return None
                
            # L·∫•y t·∫•t c·∫£ documents t·ª´ collection
            docs = db.collection(self.firestore_collection).stream()
            
            # Chuy·ªÉn ƒë·ªïi documents th√†nh list of dictionaries
            data = []
            for doc in docs:
                doc_data = doc.to_dict()
                data.append(doc_data)
            
            if not data:
                st.info("No data found in Firestore collection")
                return None
                
            # Chuy·ªÉn ƒë·ªïi th√†nh DataFrame
            df = pd.DataFrame(data)
            
            # Validate dataset structure
            required_columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']
            if all(col in df.columns for col in required_columns):
                st.success(f"‚òÅÔ∏è Dataset loaded from Firestore ({len(df)} records)")
                return df
            else:
                st.warning(f"Firestore dataset found but missing required columns: {required_columns}")
                return None
                
        except Exception as e:
            st.error(f"Error loading dataset from Firestore: {str(e)}")
            return None
    
    def save_to_firestore(self, df, db):
        """
        Save dataset l√™n Firestore collection
        
        Args:
            df: pandas.DataFrame - Dataset c·∫ßn save
            db: Firestore database client
            
        Returns:
            bool: True n·∫øu save th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            if not db:
                st.warning("Firestore client not available")
                return False
                
            # Chuy·ªÉn DataFrame th√†nh list of dictionaries
            records = df.to_dict('records')
            
            # X√≥a collection c≈© tr∆∞·ªõc khi save m·ªõi (optional)
            batch = db.batch()
            
            # L·∫•y t·∫•t c·∫£ documents hi·ªán c√≥ ƒë·ªÉ x√≥a
            existing_docs = db.collection(self.firestore_collection).stream()
            for doc in existing_docs:
                batch.delete(doc.reference)
            
            # Commit batch delete
            batch.commit()
            
            # T·∫°o batch m·ªõi ƒë·ªÉ add data
            batch = db.batch()
            
            # Add t·ª´ng record v√†o Firestore
            for record in records:
                doc_ref = db.collection(self.firestore_collection).document()
                batch.set(doc_ref, record)
            
            # Commit batch add
            batch.commit()
            
            st.success(f"‚òÅÔ∏è Dataset saved to Firestore ({len(records)} records)")
            return True
            
        except Exception as e:
            st.error(f"Error saving dataset to Firestore: {str(e)}")
            return False
    
    def save_to_local(self, df):
        """
        Save dataset xu·ªëng file CSV local
        
        Args:
            df: pandas.DataFrame - Dataset c·∫ßn save
            
        Returns:
            bool: True n·∫øu save th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            # T·∫°o th∆∞ m·ª•c data n·∫øu ch∆∞a t·ªìn t·∫°i
            os.makedirs("data", exist_ok=True)
            
            # Save DataFrame th√†nh CSV
            df.to_csv(self.local_dataset_path, index=False)
            
            st.success(f"üíæ Dataset saved to local file: {self.local_dataset_path}")
            return True
            
        except Exception as e:
            st.error(f"Error saving dataset to local: {str(e)}")
            return False
    
    def load_sklearn_iris(self):
        """
        Load iris dataset t·ª´ sklearn
        
        Returns:
            pandas.DataFrame or None: DataFrame n·∫øu load th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        try:
            iris = load_iris()
            df = pd.DataFrame(iris.data, columns=['sepal_length', 'sepal_width', 'petal_length', 'petal_width'])
            df['species'] = iris.target_names[iris.target]
            
            st.success(f"üìä Fresh Iris dataset loaded from sklearn ({len(df)} records)")
            return df
            
        except Exception as e:
            st.error(f"Error loading iris dataset from sklearn: {str(e)}")
            return None
    
    def initialize_dataset(self, db=None):
        """
        Initialize dataset theo logic ∆∞u ti√™n m·ªõi:
        1. Ki·ªÉm tra local dataset tr∆∞·ªõc
        2. N·∫øu kh√¥ng c√≥ local v√† c√≥ Firestore connection -> b·∫Øt bu·ªôc load t·ª´ Firestore
        3. N·∫øu kh√¥ng c√≥ c·∫£ hai -> hi·ªÉn th·ªã th√¥ng b√°o c·∫ßn get data t·ª´ Firestore
        
        Args:
            db: Firestore database client (optional)
            
        Returns:
            pandas.DataFrame or None: Dataset ƒë√£ load, None n·∫øu th·∫•t b·∫°i ho·∫∑c c·∫ßn get data
        """
        try:
            # B∆∞·ªõc 1: Ki·ªÉm tra local dataset tr∆∞·ªõc
            if self.check_local_dataset_exists():
                df = self.load_local_dataset()
                if df is not None:
                    return df
            
            # B∆∞·ªõc 2: N·∫øu kh√¥ng c√≥ local, KH√îNG t·ª± ƒë·ªông t·∫£i t·ª´ Firestore n·ªØa
            st.warning("‚ö†Ô∏è No local dataset found.")
            st.info("üí° Please use the 'Load from Firestore' button below to load data manually.")
            return None
            
        except Exception as e:
            st.error(f"Error initializing dataset: {str(e)}")
            return None
    
    def get_data_from_firestore_button(self, db):
        """
        Hi·ªÉn th·ªã button ƒë·ªÉ get data t·ª´ Firestore v√† x·ª≠ l√Ω logic
        
        Args:
            db: Firestore database client
            
        Returns:
            pandas.DataFrame or None: Dataset n·∫øu load th√†nh c√¥ng, None n·∫øu th·∫•t b·∫°i
        """
        try:
            if not db:
                st.error("Firestore client not available. Please check your connection.")
                return None
            
            # Hi·ªÉn th·ªã button
            if st.button("üîÑ Get Data from Firestore", type="primary"):
                with st.spinner("Loading data from Firestore..."):
                    df = self.load_from_firestore(db)
                    if df is not None:
                        # Save xu·ªëng local
                        self.save_to_local(df)
                        st.success("‚úÖ Data successfully loaded from Firestore and saved to local!")
                        # Rerun ƒë·ªÉ refresh page
                        st.rerun()
                        return df
                    else:
                        st.error("‚ùå No data found in Firestore collection.")
                        return None
            
            return None
            
        except Exception as e:
            st.error(f"Error getting data from Firestore: {str(e)}")
            return None
    
    def check_data_availability(self, db=None):
        """
        Ki·ªÉm tra t√≠nh kh·∫£ d·ª•ng c·ªßa d·ªØ li·ªáu v√† hi·ªÉn th·ªã UI t∆∞∆°ng ·ª©ng
        
        Args:
            db: Firestore database client (optional)
            
        Returns:
            pandas.DataFrame or None: Dataset n·∫øu c√≥ s·∫µn, None n·∫øu c·∫ßn get data
        """
        try:
            # Ki·ªÉm tra local tr∆∞·ªõc
            if self.check_local_dataset_exists():
                df = self.load_local_dataset()
                if df is not None:
                    return df
            
            # Kh√¥ng c√≥ local data
            st.warning("‚ö†Ô∏è No local dataset found.")
            
            if db is not None:
                # C√≥ Firestore connection, hi·ªÉn th·ªã button get data
                st.info("üí° You can get data from Firestore cloud storage.")
                return self.get_data_from_firestore_button(db)
            else:
                # Kh√¥ng c√≥ Firestore connection
                st.error("‚ùå No Firestore connection available. Please check your Firebase configuration.")
                return None
                
        except Exception as e:
            st.error(f"Error checking data availability: {str(e)}")
            return None
    
    def get_dataset_info(self, df):
        """
        L·∫•y th√¥ng tin c∆° b·∫£n v·ªÅ dataset
        
        Args:
            df: pandas.DataFrame - Dataset
            
        Returns:
            dict: Dictionary ch·ª©a th√¥ng tin v·ªÅ dataset
        """
        try:
            if df is None:
                return None
                
            info = {
                'total_records': len(df),
                'features': len(df.columns) - 1,  # Exclude target column
                'species_count': len(df['species'].unique()),
                'species_list': df['species'].unique().tolist(),
                'species_distribution': df['species'].value_counts().to_dict(),
                'columns': df.columns.tolist()
            }
            
            return info
            
        except Exception as e:
            st.error(f"Error getting dataset info: {str(e)}")
            return None
    
    def refresh_from_firestore(self, db):
        """
        Refresh dataset t·ª´ Firestore (force reload)
        
        Args:
            db: Firestore database client
            
        Returns:
            pandas.DataFrame or None: Dataset m·ªõi t·ª´ Firestore
        """
        try:
            if not db:
                st.warning("Firestore client not available")
                return None
                
            df = self.load_from_firestore(db)
            if df is not None:
                # Save xu·ªëng local ƒë·ªÉ thay th·∫ø file c≈©
                self.save_to_local(df)
            
            return df
            
        except Exception as e:
            st.error(f"Error refreshing dataset from Firestore: {str(e)}")
            return None
    
    def upload_local_to_firestore(self, db):
        """
        Upload dataset t·ª´ local l√™n Firestore
        
        Args:
            db: Firestore database client
            
        Returns:
            bool: True n·∫øu upload th√†nh c√¥ng, False n·∫øu th·∫•t b·∫°i
        """
        try:
            if not db:
                st.warning("Firestore client not available")
                return False
                
            df = self.load_local_dataset()
            if df is not None:
                return self.save_to_firestore(df, db)
            else:
                st.warning("No local dataset found to upload")
                return False
                
        except Exception as e:
            st.error(f"Error uploading local dataset to Firestore: {str(e)}")
            return False